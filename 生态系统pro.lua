----------------------------
-- 柏林噪声函数模块
----------------------------
local gradients3D = {
    {1, 1, 0}, {-1, 1, 0}, {1, -1, 0}, {-1, -1, 0},
    {1, 0, 1}, {-1, 0, 1}, {1, 0, -1}, {-1, 0, -1},
    {0, 1, 1}, {0, -1, 1}, {0, 1, -1}, {0, -1, -1}
}
local perm = {}
for i = 0, 255 do
    perm[i] = math.random(0, 255)
end
for i = 0, 255 do
    perm[256 + i] = perm[i]
end

local function fade(t)
    return t * t * t * (t * (t * 6 - 15) + 10)
end
local function lerp(a, b, t)
    return a + t * (b - a)
end
local function grad3(hash, x, y, z)
    local g = gradients3D[(hash % #gradients3D) + 1]
    return g[1] * x + g[2] * y + g[3] * z
end
local function perlin3D(x, y, z)
    local X = math.floor(x) % 256
    local Y = math.floor(y) % 256
    local Z = math.floor(z) % 256

    local xf = x - math.floor(x)
    local yf = y - math.floor(y)
    local zf = z - math.floor(z)

    local u = fade(xf)
    local v = fade(yf)
    local w = fade(zf)

    local aaa = perm[perm[perm[X] + Y] + Z]
    local aba = perm[perm[perm[X] + Y + 1] + Z]
    local aab = perm[perm[perm[X] + Y] + Z + 1]
    local abb = perm[perm[perm[X] + Y + 1] + Z + 1]
    local baa = perm[perm[perm[X + 1] + Y] + Z]
    local bba = perm[perm[perm[X + 1] + Y + 1] + Z]
    local bab = perm[perm[perm[X + 1] + Y] + Z + 1]
    local bbb = perm[perm[perm[X + 1] + Y + 1] + Z + 1]

    local x1 = lerp(grad3(aaa, xf, yf, zf), grad3(baa, xf - 1, yf, zf), u)
    local x2 = lerp(grad3(aba, xf, yf - 1, zf), grad3(bba, xf - 1, yf - 1, zf), u)
    local y1 = lerp(x1, x2, v)
    local x3 = lerp(grad3(aab, xf, yf, zf - 1), grad3(bab, xf - 1, yf, zf - 1), u)
    local x4 = lerp(grad3(abb, xf, yf - 1, zf - 1), grad3(bbb, xf - 1, yf - 1, zf - 1), u)
    local y2 = lerp(x3, x4, v)
    
    return lerp(y1, y2, w)
end

----------------------------
-- 参数设置
----------------------------
-- 地形参数
local CHUNK_RADIUS = 90           -- 地形生成范围半径
local HEIGHT_SCALE = 7            -- 较小的值使得地形变化平缓
local GROUND_LEVEL = 60           -- 地面基准高度（整体上移）
local BLOCK_GRASS = 100          -- 表层草方块
local BLOCK_DIRT = 101   -- 泥土方块
local BLOCK_S=104
local BLOCK_AIR = 0               -- 空气方块
local BLOCK_WATER = 4            -- 水方块
local RIVER_THRESHOLD = -0.2      -- 低洼区域生成水面阈值

-- 矿洞参数：仅在最底部（y < 30）区域生成管道状矿洞
local CAVE_SCALE = 10             -- 矿洞噪声缩放系数
local CAVE_THRESHOLD = 0.25       -- 矿洞生成噪声阈值（数值越高，矿洞越少）
local CAVE_DEPTH = 50             -- 矿洞生成区域：仅在 y < 30 内生成矿洞，防止破坏地表
local CAVE_RADIUS = 0.5           -- 矿洞通道半径

-- 其它生成参数
local MINERAL_IDS = {400,401,402,403,404,405,406,407,445,446,451,452,453,454,455,598,5}
local flower = {150049,150050,150051,150052,150053,150054,150055,150056,150057,150058,150059,150060,150061,150062,150063,150064,150065,300,301,302,303,304,305,307,308,309,310,311,312,313,234,737,243,110}
local waterblock = {248,250,150066}
local waterblockP = 0.02
local flowerP = 0.03            -- 植物生成概率
local MINERAL_PROBABILITY = 0.01  -- 矿物生成概率
local min = 0.01                -- 备用概率

-- 多层噪声参数（用于平原效果）
local BASE_NOISE_SCALE = 60     -- 基础噪声频率
local BASE_NOISE_AMP = 0.7      -- 基础噪声振幅
local DETAIL_NOISE_SCALE = 15   -- 细节噪声频率
local DETAIL_NOISE_AMP = 0.3    -- 细节噪声振幅

local SMOOTH_ITERATIONS = 2     -- 平滑迭代次数

----------------------------
-- 建筑生成参数（地表建筑）
----------------------------
local BUILDING_DATA = {
    {
        name = "House1",
        probability = 0.0008,  -- 生成概率
        rawData = "AAB100,0;AAb507,0;AAD507,0;AAE507,0;AAF100,0;AAG100,0;AAH100,0;AAk100,0;AbB817,1;AbE817,1;ADG507,0;BAA100,0;BAB101,0;BAb109,0;BAD109,0;BAE109,0;BAF101,0;BAG101,0;BAH101,0;BAk100,0;BBB540,0;BBE540,0;BBF540,0;BBG540,0;BBH540,0;BbB109,0;BbE109,0;BbF109,0;BbG731,8;BbH109,0;BDB108,0;BDb527,4;BDD527,4;BDE108,0;BDF108,0;BDG108,0;BDH108,0;BEB507,0;BED507,0;BEF507,0;BEH507,0;bAA100,0;bAB101,0;bAb419,0;bAD419,0;bAE101,0;bAF419,0;bAG419,0;bAH101,0;bAk100,0;bBA813,3;bBB540,0;bBE540,0;bBG582,13;bBH540,0;bBk739,0;bbA813,3;bbB109,0;bbE108,0;bbH731,11;bDA813,3;bDB108,0;bDb507,1;bDD507,1;bDE507,1;bDF507,1;bDG507,1;bDH108,0;bDk507,0;bEG1019,0;DAA100,0;DAB101,0;DAb419,0;DAD419,0;DAE101,0;DAF419,0;DAG419,0;DAH101,0;DAk100,0;DBB540,0;DBE540,0;DBG582,9;DBH540,0;DBk739,1;DbB109,0;DbE108,0;DbH109,0;DDB108,0;DDb507,1;DDD507,1;DDE507,1;DDF507,1;DDG507,1;DDH108,0;DEB507,0;DED534,1;DEH534,2;DFD534,1;DFG517,1;DFH517,0;DGD534,1;DGE517,1;DGF517,0;EAA100,0;EAB101,0;EAb419,0;EAD419,0;EAE101,0;EAF419,0;EAG419,0;EAH101,0;EAk100,0;EBB540,0;EBE540,0;EBH540,0;EbB109,0;EbE108,0;EbH109,0;EDB108,0;EDb507,1;EDD507,1;EDE507,1;EDF507,1;EDG507,1;EDH108,0;EFG516,1;EFH516,0;EGE516,1;EGF516,0;FAA100,0;FAB101,0;FAb419,0;FAD419,0;FAE419,0;FAF419,0;FAG419,0;FAH101,0;FAk100,0;FBB540,0;FBH540,0;FbB731,10;FbH731,11;FDA507,0;FDB108,0;FDb507,1;FDD507,1;FDE507,1;FDF507,1;FDG507,1;FDH108,0;FDk507,0;FEB507,0;FEG739,2;FEH507,0;FFG517,1;FFH517,0;FGE517,1;FGF517,0;GAA100,0;GAB101,0;GAb419,0;GAD419,0;GAE419,0;GAF419,0;GAG419,0;GAH101,0;GAk100,0;GBB540,0;GBb1181,0;GBG802,2;GBH540,0;GbB109,0;Gbb1181,4;GbH109,0;GDB108,0;GDb507,1;GDD507,1;GDE507,1;GDF507,1;GDG507,1;GDH108,0;GEF739,1;GFG516,1;GFH516,0;GGE516,1;GGF516,0;HAA100,0;HAB101,0;HAb101,0;HAD101,0;HAE101,0;HAF101,0;HAG101,0;HAH101,0;HAk100,0;HBB540,0;HBb540,0;HBD540,0;HBE540,0;HBF540,0;HBG540,0;HBH540,0;HbB109,0;Hbb109,0;HbD731,9;HbE109,0;HbF109,0;HbG731,9;HbH109,0;HDB108,0;HDb108,0;HDD108,0;HDE108,0;HDF108,0;HDG108,0;HDH108,0;HEB507,0;HED534,3;HEF507,0;HEH534,0;HFD534,3;HFG517,1;HFH517,0;HGD534,3;HGE517,1;HGF517,0;kAA100,0;kAB100,0;kAb100,0;kAD100,0;kAE100,0;kAF100,0;kAG100,0;kAH100,0;kAk100,0;kDD507,0;kDG507,0"  -- 示例建筑密文数据
    },
    {
        name = "House2",
        probability = 0.0007,
        rawData = "BAB100,0;BAb100,0;BAD109,0;BAE109,0;BAF109,0;BAG109,0;BAH109,0;BAk109,0;BAh109,0;BAK109,0;BAa109,0;BAu109,0;BAN100,0;BBb731,9;BBE108,0;BBF527,7;BBG108,0;BBH527,6;BBk108,0;BBh527,7;BBK108,0;BBa527,6;BBu540,1;BBN599,0;Bbb731,13;BbD731,13;BbE108,0;BbF519,1;BbG519,1;BbH519,1;Bbk108,0;Bbh738,0;BbK731,9;Bba519,0;Bbu540,1;BDD731,13;BDE108,0;BDF534,2;BDG738,1;BDH534,2;BDk108,0;BDu540,1;BDN935,2;BED108,0;BEE108,0;BEF527,7;BEG507,1;BEH527,6;BEk108,0;BEh527,7;BEK507,1;BEa527,6;BEu108,0;BEN527,3;BFE540,0;BFF507,0;BFG540,0;BFH507,0;BFk540,0;BFh507,0;BFK540,0;BFa507,0;BFu540,0;BGE534,2;BGG534,2;BGk534,2;BGK534,2;BHE516,0;BHF565,0;BHG516,0;BHH565,0;BHk516,0;BHh565,0;BHK516,0;bAB100,0;bAb109,0;bAD109,0;bAE109,0;bAF101,0;bAG101,0;bAH101,0;bAk101,0;bAh109,0;bAK109,0;bAa109,0;bAu108,0;bAN109,0;bBb527,2;bBD108,0;bBE211,0;bBF421,0;bBG421,0;bBH421,0;bBk421,0;bBh421,0;bBK421,0;bBa421,0;bBu534,0;bbD527,2;bbE211,0;bbF421,0;bbG421,0;bbH421,0;bbk421,0;bbh421,0;bba421,0;bbu534,0;bDE527,2;bDF421,0;bDG421,0;bDH421,0;bDk421,0;bDh421,0;bDK421,0;bDa421,0;bDu534,0;bEF527,2;bEG211,0;bEH211,0;bEk211,0;bEh211,0;bEK211,0;bEa211,0;bEu525,7;bEN519,1;bFu507,0;bHE516,1;bHF565,1;bHG516,1;bHH565,1;bHk516,1;bHh565,1;bHK516,1;DAB100,0;DAb109,0;DAD101,0;DAE207,0;DAF207,0;DAG207,0;DAH207,0;DAk207,0;DAh419,0;DAK419,0;DAa419,0;DAu108,0;DAN109,0;DBb527,2;DBD211,0;DBE738,1;DBk731,0;DbD527,2;DDE527,2;DEF527,2;DEG519,1;DEH519,1;DEk519,1;DEh519,1;DEK519,1;DEa211,0;DEu525,7;DEN519,1;DFu540,0;DkE516,0;DkF565,0;DkG516,0;DkH565,0;Dkk516,0;Dkh565,0;DkK516,0;EAB100,0;EAb109,0;EAD109,0;EAE207,0;EAF207,0;EAG207,0;EAH207,0;EAk207,0;EAh419,0;EAK419,0;EAa419,0;EAu108,0;EAN109,0;EBb527,2;EBD211,0;EBE738,2;EBk525,7;EbD527,2;EDE527,2;EEF527,2;EEG519,1;EEH519,1;EEk519,1;EEh519,1;EEK519,1;EEa211,0;EEu525,7;EEN519,1;EFu507,0;EkE516,1;EkF565,1;EkG516,1;EkH565,1;Ekk516,1;Ekh565,1;EkK516,1;FAB100,0;FAb109,0;FAD109,0;FAE109,0;FAF207,0;FAG207,0;FAH207,0;FAk207,0;FAh419,0;FAK419,0;FAu109,0;FAN100,0;FBb108,0;FBD108,0;FBE108,0;FBF525,5;FBG525,5;FBH525,5;FBk525,5;FBa421,0;FBu540,2;FBN599,0;Fbb108,0;FbD108,0;FbE108,0;Fba421,0;Fbu540,2;FDb108,0;FDD108,0;FDE108,0;FDa421,0;FDu540,2;FDN935,2;FEb108,0;FED108,0;FEE108,0;FEF108,0;FEG108,0;FEH108,0;FEk108,0;FEh108,0;FEK108,0;FEa211,0;FEu108,0;FEN527,3;FFB527,2;FFb108,0;FFE738,2;FFG108,0;FFk738,1;FFh738,2;FFK108,0;FFu540,0;FGb108,0;FGD507,1;FGE507,1;FGF507,1;FGG108,0;FGH507,1;FGk507,1;FGh507,1;FGK108,0;FHb108,0;FHF738,1;FHG108,0;FHH738,0;FHk738,2;FHh738,0;FHK108,0;Fkb540,0;FkD527,7;FkE507,1;FkF527,6;FkG108,0;FkH527,7;Fkk507,1;Fkh527,6;FkK527,1;Fhb527,4;FhD527,4;FhE527,4;FhF527,4;FhG527,4;FhH527,4;Fhk527,4;Fhh527,4;FhK527,7;GAB100,0;GAb109,0;GAD109,0;GAE419,0;GAF419,0;GAG419,0;GAH419,0;GAk419,0;GAh419,0;GAK419,0;GAa109,0;GAu109,0;GAN100,0;GBb822,0;GBD421,0;GBa421,0;GBu527,5;GBN323,2;Gbb935,3;GbD421,0;Gba421,0;Gbu534,0;GDD421,0;GDa421,0;GDu534,0;GEb527,5;GED211,0;GEE519,1;GEF519,1;GEG519,1;GEH519,1;GEk519,1;GEh519,1;GEK519,1;GEa211,0;GEu527,5;GFB525,2;GFb101,0;GFD421,0;GFE421,0;GFF421,0;GFG421,0;GFH421,0;GFk421,0;GFh421,0;GFu507,0;GGb311,0;GGD421,0;GGE421,0;GGF421,0;GGG421,0;GGH421,0;GGk421,0;GGh421,0;GHD421,0;GHE421,0;GHF421,0;GHG421,0;GHH421,0;GHk421,0;GHh421,0;Gkb527,5;GkD211,0;GkE211,0;GkF211,0;GkG211,0;GkH211,0;Gkk211,0;Gkh211,0;GkK527,5;Ghb527,6;GhK527,7;GKD507,0;GKE507,0;GKF507,0;GKG507,0;GKH507,0;GKk507,0;GKh507,0;HAB109,0;HAb109,0;HAD425,0;HAE419,0;HAF419,0;HAG419,0;HAH419,0;HAk419,0;HAh419,0;HAK419,0;HAa109,0;HAu109,0;HAN100,0;HBa421,0;HBu527,7;Hba731,11;HDD421,0;HDa421,0;HEb507,1;HED211,0;HEE519,1;HEF519,1;HEG519,1;HEH519,1;HEk519,1;HEh519,1;HEK519,1;HEa211,0;HEu507,1;HFB525,2;HFb101,0;HFD421,0;HFE738,1;HFu540,0;HGb311,0;HGD731,10;HHD731,14;HHh421,0;Hkb507,1;HkD211,0;HkE507,2;HkF507,2;HkG507,2;HkH507,2;Hkk507,2;Hkh211,0;HkK507,1;Hhb527,6;HhK527,7;HKD507,0;HKE507,1;HKF540,0;HKG507,1;HKH540,0;HKk507,1;HKh507,0;kAB109,0;kAb109,0;kAD109,0;kAE109,0;kAF425,0;kAG101,0;kAH207,0;kAk101,0;kAh425,0;kAK109,0;kAa109,0;kAu109,0;kAN100,0;kBD421,0;kBE108,0;kBG108,0;kBH1181,2;kBk108,0;kBK108,0;kBa421,0;kBu527,4;kbb935,3;kbD421,0;kbE108,0;kbG108,0;kbH1181,6;kbk108,0;kbK108,0;kba421,0;kbu534,0;kDD421,0;kDE108,0;kDF108,0;kDG108,0;kDH527,4;kDk108,0;kDh108,0;kDK108,0;kDa421,0;kDu534,0;kEb527,4;kED211,0;kEE211,0;kEF211,0;kEG211,0;kEH519,2;kEk828,10;kEh211,0;kEK211,0;kEa211,0;kEu527,4;kFB525,2;kFb101,0;kFD421,0;kFE966,3;kFF965,2;kFH828,2;kFk828,6;kFh421,0;kFu507,0;kGb311,0;kGD421,0;kGh421,0;kHD421,0;kHh421,0;kkb527,4;kkD211,0;kkE108,3;kkF108,3;kkG108,3;kkH507,2;kkk507,2;kkh211,0;kkK527,4;khb527,6;khK527,7;kKD507,0;kKE540,0;kKk540,0;kKh507,0;hAB100,0;hAb101,0;hAD109,0;hAE419,0;hAF419,0;hAG828,1;hAH101,0;hAk419,0;hAh419,0;hAK419,0;hAa109,0;hAu109,0;hAN100,0;hBb108,0;hBD421,0;hBE929,0;hBG828,13;hBH108,0;hBk828,5;hBK929,0;hBa421,0;hBu108,0;hBN224,0;hbb108,0;hbD421,0;hbH108,0;hba421,0;hbu108,0;hDb108,0;hDD421,0;hDH108,0;hDa421,0;hDu108,0;hEb108,0;hED211,0;hEE519,1;hEF519,1;hEG519,1;hEH211,0;hEk519,1;hEh519,1;hEK519,1;hEa211,0;hEu507,2;hFB527,2;hFb108,0;hFD421,0;hFE108,0;hFF108,0;hFG108,0;hFH108,0;hFk108,0;hFh421,0;hFK108,0;hFu540,0;hGb108,0;hGD421,0;hGE108,0;hGF108,0;hGG108,0;hGH108,0;hGk108,0;hGh421,0;hGK108,0;hHb108,0;hHD421,0;hHE108,0;hHF108,0;hHG108,0;hHH108,0;hHk108,0;hHh421,0;hHK108,0;hkb540,0;hkD211,0;hkk507,2;hkh211,0;hkK527,3;hhb527,6;hhK527,7;hKD507,0;hKE507,1;hKk507,1;hKh507,0;KAB100,0;KAb101,0;KAD109,0;KAE419,0;KAF419,0;KAG828,13;KAH101,0;KAk419,0;KAh419,0;KAK419,0;KAa101,0;KAu109,0;KAN100,0;KBb822,0;KBD421,0;KBG828,9;KBH108,0;KBk828,1;KBa421,0;KBu527,5;KBN305,0;KbD421,0;KbH108,0;Kba421,0;Kbu534,0;KDD421,0;KDH108,0;KDa421,0;KDu534,0;KEb527,5;KED211,0;KEE519,1;KEF519,1;KEG519,1;KEH211,0;KEk828,10;KEh519,1;KEK519,1;KEa211,0;KEu527,5;KFB525,2;KFb101,0;KFD421,0;KFE966,3;KFF965,2;KFH828,2;KFk828,6;KFh421,0;KFu507,0;KGb311,0;KGD421,0;KGh421,0;KHD421,0;KHh421,0;Kkb527,5;KkD211,0;KkE108,2;KkF108,4;KkG108,2;KkH108,4;Kkk108,4;Kkh211,0;KkK527,5;Khb527,6;KhK527,7;KKD507,0;KKE540,0;KKk540,0;KKh507,0;aAB100,0;aAb101,0;aAD109,0;aAE419,0;aAF419,0;aAG419,0;aAH101,0;aAk419,0;aAh419,0;aAK419,0;aAa109,0;aAu109,0;aAN100,0;aBb109,0;aBD421,0;aBE965,1;aBH108,0;aBk828,0;aBK965,1;aBa421,0;aBu527,7;abD731,10;abH108,0;aba731,11;aDD421,0;aDH108,0;aDa421,0;aEb507,1;aED211,0;aEE519,1;aEF519,1;aEG519,1;aEH211,0;aEk519,1;aEh519,1;aEK519,1;aEa211,0;aEu507,1;aFB525,2;aFb101,0;aFD421,0;aFE738,0;aFu540,0;aGb311,0;aGD731,10;aHD731,14;aHh421,0;akb507,1;akD211,0;akE507,2;akF507,2;akG507,2;akH108,4;akk108,4;akh211,0;akK507,1;ahb527,6;ahK527,7;aKD507,0;aKE507,1;aKF540,0;aKG507,1;aKH540,0;aKk507,1;aKh507,0;uAB100,0;uAb101,0;uAD109,0;uAE419,0;uAF419,0;uAG419,0;uAH109,0;uAk419,0;uAh419,0;uAK419,0;uAa109,0;uAu109,0;uAN100,0;uBb822,0;uBD421,0;uBE966,0;uBH108,0;uBk828,2;uBh828,6;uBK966,0;uBa421,0;uBu527,7;ubD421,0;ubH108,0;uba421,0;uDD421,0;uDH108,0;uDa421,0;uEb507,1;uED211,0;uEE519,1;uEF519,1;uEG519,1;uEH211,0;uEk519,1;uEh519,1;uEK519,1;uEa211,0;uEu507,1;uFB525,2;uFb101,0;uFD421,0;uFE108,0;uFF108,0;uFG108,0;uFH108,0;uFk108,0;uFh421,0;uFu507,0;uGb311,0;uGD421,0;uGE108,0;uGF108,0;uGG108,0;uGH108,0;uGk108,0;uGh421,0;uHD421,0;uHE108,0;uHF108,0;uHG108,0;uHH108,0;uHk108,0;uHh421,0;ukb527,4;ukD211,0;ukE211,0;ukF211,0;ukG211,0;ukH211,0;ukk211,0;ukh211,0;ukK527,4;uhb527,6;uhK527,7;uKD507,0;uKE507,0;uKF507,0;uKG507,0;uKH507,0;uKk507,0;uKh507,0;NAB101,0;NAb101,0;NAD109,0;NAE109,0;NAF109,0;NAG109,0;NAH109,0;NAk109,0;NAh109,0;NAK109,0;NAa109,0;NAu109,0;NAN100,0;NBB822,0;NBb822,0;NBD421,0;NBE421,0;NBF421,0;NBG421,0;NBH421,0;NBk421,0;NBh421,0;NBK421,0;NBa421,0;NBu527,4;NBN305,0;Nbb822,0;NbD421,0;NbE731,9;NbF421,0;NbG421,0;NbH421,0;Nbk421,0;Nbh731,9;NbK421,0;Nba421,0;Nbu534,0;NDD421,0;NDE421,0;NDF421,0;NDG421,0;NDH421,0;NDk421,0;NDh421,0;NDK421,0;NDa421,0;NDu534,0;NEb527,4;NED211,0;NEE211,0;NEF211,0;NEG211,0;NEH211,0;NEk211,0;NEh211,0;NEK211,0;NEa211,0;NEu527,4;NFB525,2;NFb108,0;NFD108,0;NFE532,1;NFF532,1;NFG966,1;NFH532,1;NFk532,1;NFh108,0;NFK108,0;NFu540,0;NGb108,0;NGD108,0;NGG929,0;NGh108,0;NGK108,0;NHb108,0;NHD527,7;NHh527,6;NHK108,0;Nkb540,0;NkD108,0;NkE527,7;NkF507,1;NkG507,1;NkH507,1;Nkk527,6;Nkh108,0;NkK540,0;Nhb527,6;NhD527,5;NhE527,5;NhF527,5;NhG527,5;NhH527,5;Nhk527,5;Nhh527,5;NhK527,5;OAB109,0;OAb109,0;OAD109,0;OAE109,0;OAF109,0;OAG109,0;OAH109,0;OAk109,0;OAh109,0;OAK109,0;OAa109,0;OAu101,0;OAN100,0;OBb108,0;OBD1753,1;OBE1753,1;OBF1753,1;OBG108,0;OBH108,0;OBk1753,1;OBh1753,1;OBK1753,1;OBa1753,1;OBu108,0;OBN305,0;Obb108,0;ObG108,0;ObH108,0;Obu108,0;ODb108,0;ODG108,0;ODH108,0;ODu108,0;OEb108,0;OED527,7;OEE507,1;OEF527,6;OEG108,0;OEH108,0;OEk527,7;OEh507,1;OEK507,1;OEa527,6;OEu108,0;OFB527,3;OFu507,0"
    },
    {
        name = "Tree1",
        probability = 0.006,
        rawData = "AAE224,0;AAh224,0;BAk224,0;BAh224,0;BDF218,2;BFF218,2;BHF218,2;bAH224,0;bAk224,0;bbF333,0;bDE218,2;bDF218,2;bDG218,2;bEF333,0;bFE218,2;bFF218,2;bFG218,2;bGE218,2;bGF333,0;bGG218,2;bHE218,2;bHF218,2;bHG218,2;bkF218,2;DAH224,0;DAk224,0;DAh224,0;DbE333,0;DbF332,0;DbG333,0;DDD218,2;DDE218,2;DDF332,0;DDG218,2;DDH218,2;DEE218,2;DEF332,0;DEG218,2;DFD218,2;DFE333,0;DFF332,0;DFG333,0;DGD218,2;DGE218,2;DGF332,0;DGG218,2;DGH218,2;DHb218,2;DHE218,2;DHF333,0;DHG218,2;DkE218,2;DkF218,2;DkG218,2;DhF218,2;EAB224,0;EAk224,0;EbD333,0;EbE218,2;EbF332,0;EbG218,2;EbH333,0;EDb218,2;EDD218,2;EDE218,2;EDF218,2;EDG218,2;EDH218,2;EDk218,2;EED333,0;EEF218,2;EEH218,2;EFb218,2;EFD218,2;EFE218,2;EFF333,0;EFH333,0;EGb333,0;EGD218,2;EGE218,2;EGF218,2;EGG218,2;EGH218,2;EGk218,2;EHB218,2;EHb218,2;EHF218,2;EHH218,2;Ekb218,2;EkF218,2;EkH218,2;FAA224,0;FAB224,0;FAE224,0;FAF200,0;FAG224,0;FAk224,0;FBF200,0;Fbb333,0;FbD332,0;FbE332,0;FbF200,0;FbG332,0;FbH332,0;Fbk333,0;FDB218,2;FDb218,2;FDD332,0;FDE218,2;FDF332,0;FDG218,2;FDH332,0;FDh218,2;FEb218,2;FED332,0;FEE218,2;FEF333,0;FEG218,2;FEH332,0;FFb332,0;FFD332,0;FFE333,0;FFF218,2;FFG333,0;FFH332,0;FFk333,0;FGB333,0;FGb332,0;FGD218,2;FGE218,2;FGF218,2;FGH332,0;FGk218,2;FGh218,2;FHA218,2;FHB218,2;FHb333,0;FHD218,2;FHE218,2;FHG218,2;FHH333,0;FHk218,2;FkB218,2;FkD218,2;FkG218,2;FkH218,2;Fkk218,2;Fhb218,2;GAA224,0;GAb224,0;GAE224,0;GbD218,2;GbE218,2;GbF332,0;GbG218,2;GDb218,2;GDD333,0;GDE324,0;GDF218,2;GDG218,2;GDH218,2;GDk218,2;GEb218,2;GED218,2;GEE218,2;GEF218,2;GEH333,0;GFb218,2;GFD333,0;GFE218,2;GFF333,0;GFG218,2;GFH218,2;GFk218,2;GGb333,0;GGE218,2;GGF218,2;GGG218,2;GGH218,2;GGk218,2;GHB218,2;GHD218,2;GHF218,2;GHG218,2;GHH218,2;Gkb218,2;GkF218,2;GkH218,2;HbE333,0;HbF332,0;HDD218,2;HDE218,2;HDF332,0;HDG218,2;HED218,2;HEE333,0;HEF332,0;HEG218,2;HFD218,2;HFE218,2;HFF332,0;HFG218,2;HGD218,2;HGE218,2;HGF332,0;HGG333,0;HHb218,2;HHE218,2;HHF333,0;HHG218,2;HHH218,2;HkE218,2;HkF218,2;HkG218,2;HhF218,2;kbF333,0;kDE218,2;kDF218,2;kDG218,2;kEF333,0;kFE218,2;kFF218,2;kFG218,2;kGF333,0;kHE218,2;kHG218,2;kkF218,2;hDF218,2;hFF218,2;hHF218,2"
    },
    {
        name = "xingzhan",
        probability = 0.001,
        rawData = "BAB750,3;BAb1282,0;BAD1267,0;BAE1267,0;BAF1282,0;BAG750,3;bAB1282,2;bAb752,2;bAD570,5;bAE570,5;bAF752,2;bAG1282,3;bBb752,3;bBF752,3;DAB1267,2;DAb1282,8;DAD570,2;DAE570,2;DAF570,5;DAG1267,3;DBb594,6;DBD595,4;EAB1267,2;EAb570,5;EAD570,2;EAE570,2;EAF570,5;EAG1267,3;EBD595,4;FAB1282,2;FAb752,2;FAD570,5;FAE570,5;FAF752,2;FAG1282,3;FBb752,0;FBF752,0;GAB750,3;GAb1282,1;GAD1267,1;GAE1267,1;GAF1282,1;GAG750,3"
    },
    {
        name = "tree2",
        probability = 0.003,
        rawData = "FHk220,3;FkH220,3;Fkk220,3;FhH220,3;FKH220,3;FaH220,3;FuH220,3;FNH220,3;FOH220,3;GHH220,3;GHk343,0;GHh220,3;GkG220,3;GkH343,0;Gkk343,0;Gkh220,3;GhG220,3;GhH343,0;Ghk220,3;GKG220,3;GKH343,0;GKk220,3;GaG220,3;GaH343,0;Gak220,3;GuG220,3;GuH343,0;Guk220,3;GNG220,3;GNH343,0;GNk220,3;GOG220,3;GOH343,0;GOk220,3;GPH220,3;HHG220,3;HHH343,0;HHk343,0;HHh220,3;HkH220,3;Hkk220,3;HkK220,3;HhH220,3;HhK220,3;HKE220,3;HKF220,3;HKH220,3;HKK220,3;HaE220,3;HaH220,3;HaK220,3;HuE220,3;HuH220,3;HuK220,3;HNH220,3;HNK220,3;HOH220,3;kHG220,3;kHH342,0;kHk220,3;kkH220,3;kkk220,3;kkh220,3;kkK343,0;kka220,3;khh220,3;khK343,0;kha220,3;kKD220,3;kKE343,0;kKF342,0;kKG220,3;kKh220,3;kKK343,0;kKa220,3;kaD220,3;kaE343,0;kaF220,3;kaH220,3;kah220,3;kaK343,0;kaa220,3;kuD220,3;kuE343,0;kuF220,3;kuH220,3;kuh220,3;kuK343,0;kua220,3;kNE220,3;kNH220,3;kNh220,3;kNK343,0;kNa220,3;kOE220,3;kOH220,3;kOK220,3;kPH220,3;kdH220,3;hAH202,0;hBH202,0;hbH202,0;hDH202,0;hEH202,0;hFH202,0;hGH202,0;hHH202,0;hkH202,0;hkk342,0;hkh343,0;hkK343,0;hka220,3;hhH202,0;hhk220,3;hhh220,3;hhK220,3;hKE220,3;hKF342,0;hKG342,0;hKH202,0;hKK220,3;haE220,3;haF220,3;haG220,3;haH342,0;hak220,3;haK220,3;huD220,3;huE343,0;huF220,3;huG220,3;huH342,0;huk220,3;huK220,3;hND220,3;hNE343,0;hNF220,3;hNG220,3;hNH342,0;hNk220,3;hNh220,3;hNK343,0;hNa220,3;hOD220,3;hOE343,0;hOF220,3;hOG220,3;hOH342,0;hOk220,3;hOh220,3;hOK343,0;hOa220,3;hPE220,3;hPG220,3;hPH342,0;hPk220,3;hPK220,3;hdG220,3;hdH342,0;hdk220,3;hRH220,3;KEH331,0;KFG220,3;KFH342,0;KFk220,3;KGG220,3;KGH220,3;KHG220,3;KkG220,3;Kkk220,3;Kkh220,3;KkK220,3;KKF220,3;KKG220,3;KaH220,3;KuE220,3;KuH220,3;KNE220,3;KNH220,3;KNK220,3;KOE220,3;KOH220,3;KOK220,3;KPH220,3;KdH220,3;aFF220,3;aFG342,0;aFH342,0;aFk220,3;aGF220,3;aGG342,0;aGH220,3;aHF220,3;aHG343,0;aHH220,3;akF220,3;akG343,0;akH220,3;ahG220,3;aKG220,3;aKH220,3;aaH220,3;auH220,3;aNH220,3;uFG220,3;uFH220,3;uGG220,3;uHG220,3;ukF220,3;ukG343,0;ukH220,3;uhF220,3;uhG343,0;uhH220,3;uKF220,3;uKG343,0;uKH343,0;uKk220,3;uaG220,3;uaH343,0;uak220,3;uuG220,3;uuH343,0;uuk220,3;uNG220,3;uNH343,0;uNk220,3;uOH220,3;NkG220,3;NhG220,3;NKG220,3;NKH220,3;NaH220,3;NuH220,3;NNH220,3"
    }
}
local BUILDING_MIN_DISTANCE = 20
local BUILDING_CHAR_MAP = {
    A = 0, B = 1, b = 2, D = 3, E = 4, F = 5, G = 6, H = 7, k = 8, h = 9,
    K = 10, a = 11, u = 12, N = 13, O = 14, P = 15, d = 16, R = 17, S = 18, T = 19,
    U = 20, e = 21, W = 22, t = 23, Y = 24, Z = 25, ["!"] = 26, ["@"] = 27, ["#"] = 28, ["$"] = 29,
    ["%"] = 30, ["^"] = 31, ["&"] = 32, ["*"] = 33, ["("] = 34, [")"] = 35, ["-"] = 36, ["="] = 37,
    ["+"] = 38, ["["] = 39, ["]"] = 40, ["{"] = 41, ["}"] = 42, [";"] = 43, [":"] = 44,
    ["'"] = 45, ['"'] = 46, ["<"] = 47, [">"] = 48, ["?"] = 49
}
local function buildingCharToNum(char)
    return BUILDING_CHAR_MAP[char] or 0
end

----------------------------
-- 地下遗迹生成参数
----------------------------
local UNDERGROUND_BUILDING_DATA = {
    {
        name = "Ruin1",
        probability = 0.000005,
        rawData = "AAA1992,0;AAB1992,0;AAb1992,0;AAD1992,0;AAE1992,0;AAF1992,0;AAG1992,0;AAH1992,0;AAk1992,0;AAh1992,0;AAK1992,0;AAa1992,0;AAu1992,0;AAN1992,0;ABA1992,0;ABB1992,0;ABb1992,0;ABD1992,0;ABE1992,0;ABF1992,0;ABG1992,0;ABH1992,0;ABk1992,0;ABh1992,0;ABK1992,0;ABa1992,0;ABu1992,0;ABN1992,0;AbA1992,0;AbB1992,0;Abb1992,0;AbD1992,0;AbE1992,0;AbF1992,0;AbG1992,0;AbH1992,0;Abk1992,0;Abh1992,0;AbK1992,0;Aba1992,0;Abu1992,0;AbN1992,0;ADA1992,0;ADB1992,0;ADb1992,0;ADD1992,0;ADE1992,0;ADF1992,0;ADG1992,0;ADH1992,0;ADk1992,0;ADh1992,0;ADK1992,0;ADa1992,0;ADu1992,0;ADN1992,0;AEA1992,0;AEB1992,0;AEb1992,0;AED1992,0;AEE1992,0;AEF1992,0;AEG1992,0;AEH1992,0;AEk1992,0;AEh1992,0;AEK1992,0;AEa1992,0;AEu1992,0;AEN1992,0;AFA1992,0;AFB1992,0;AFb1992,0;AFD1992,0;AFE1992,0;AFF1992,0;AFG1992,0;AFH1992,0;AFk1992,0;AFh1992,0;AFK1992,0;AFa1992,0;AFu1992,0;AFN1992,0;AGA1992,0;AGB1992,0;AGb1992,0;AGD1992,0;AGE1992,0;AGF1992,0;AGG1992,0;AGH503,0;AGk503,0;AGh503,0;AGK503,0;AGa503,0;AGu503,0;AGN1992,0;AHA1992,0;AHB1992,0;AHb1992,0;AHD1992,0;AHE1992,0;AHF1992,0;AHG1992,0;AHH503,0;AHk503,0;AHh503,0;AHK503,0;AHa503,0;AHu503,0;AHN1992,0;AkA1992,0;AkB1992,0;Akb1992,0;AkD1992,0;AkE1992,0;AkF1992,0;AkG1992,0;AkH503,0;Akk503,0;Akh503,0;AkK503,0;Aka503,0;Aku503,0;AkN1992,0;AhA1992,0;AhB1992,0;Ahb1992,0;AhD1992,0;AhE1992,0;AhF1992,0;AhG1992,0;AhH503,0;Ahk503,0;Ahh503,0;AhK503,0;Aha503,0;Ahu503,0;AhN1992,0;AKA1992,0;AKB1992,0;AKb1992,0;AKD1992,0;AKE1992,0;AKF1992,0;AKG1992,0;AKH503,0;AKk503,0;AKh503,0;AKK503,0;AKa503,0;AKu503,0;AKN1992,0;BAA503,0;BAB503,0;BAb503,0;BAD503,0;BAE503,0;BAF503,0;BAG503,0;BAH503,0;BAk503,0;BAh503,0;BAK503,0;BAa503,0;BAu503,0;BAN1992,0;BBA503,0;BBB503,0;BBb503,0;BBD503,0;BBE503,0;BBF503,0;BBG503,0;BBH503,0;BBk503,0;BBh503,0;BBK503,0;BBa503,0;BBu503,0;BBN1992,0;BbA503,0;BbB503,0;Bbb503,0;BbD503,0;BbE503,0;BbF503,0;BbG503,0;BbH503,0;Bbk503,0;Bbh503,0;BbK503,0;Bba503,0;Bbu503,0;BbN1992,0;BDA503,0;BDB503,0;BDb503,0;BDD503,0;BDE503,0;BDF503,0;BDG503,0;BDH503,0;BDk503,0;BDh503,0;BDK503,0;BDa503,0;BDu503,0;BDN1992,0;BEA503,0;BEB503,0;BEb503,0;BED503,0;BEE503,0;BEF503,0;BEG503,0;BEH503,0;BEk503,0;BEh503,0;BEK503,0;BEa503,0;BEu503,0;BEN1992,0;BFA503,0;BFB503,0;BFb503,0;BFD503,0;BFE503,0;BFF503,0;BFG503,0;BFH503,0;BFk503,0;BFh503,0;BFK503,0;BFa503,0;BFu503,0;BFN1992,0;BGA503,0;BGB503,0;BGb503,0;BGD503,0;BGE503,0;BGF503,0;BGG503,0;BGH503,0;BGk422,0;BGh422,0;BGK422,0;BGa422,0;BGu503,0;BGN1992,0;BHA503,0;BHB503,0;BHb503,0;BHD503,0;BHE503,0;BHF503,0;BHG503,0;BHH503,0;BHk200369,1;BHh1992,0;BHK737,0;BHa262,12;BHu503,0;BHN1992,0;BkA503,0;BkB503,0;Bkb503,0;BkD503,0;BkE503,0;BkF503,0;BkG503,0;BkH503,0;Bkk1992,0;Bkh397,0;BkK1992,0;Bka1992,0;Bku503,0;BkN1992,0;BhA503,0;BhB503,0;Bhb503,0;BhD503,0;BhE503,0;BhF503,0;BhG503,0;BhH422,0;Bhk529,7;Bhh1992,0;BhK1992,0;Bha1992,0;Bhu503,0;BhN1992,0;BKA503,0;BKB503,0;BKb503,0;BKD503,0;BKE503,0;BKF503,0;BKG503,0;BKH503,0;BKk503,0;BKh503,0;BKK503,0;BKa503,0;BKu503,0;BKN1992,0;bAA503,0;bAB503,0;bAb503,0;bAD503,0;bAE503,0;bAF503,0;bAG503,0;bAH503,0;bAk503,0;bAh503,0;bAK503,0;bAa503,0;bAu503,0;bAN1992,0;bBA503,0;bBB1992,0;bBb1992,0;bBD1992,0;bBE1992,0;bBF1992,0;bBG1992,0;bBH1992,0;bBk503,0;bBh1992,0;bBK1992,0;bBa504,0;bBu503,0;bBN1992,0;bbA503,0;bbB501,0;bbb101992,0;bbD101992,0;bbE503,0;bbF907,2;bbG422,0;bbH422,0;bbk422,0;bbh1992,0;bbK1992,0;bba505,0;bbu503,0;bbN1992,0;bDA503,0;bDB504,0;bDb1992,0;bDD763,0;bDE200369,2;bDF503,0;bDG503,0;bDH1992,0;bDk1992,0;bDh1992,0;bDK1992,0;bDa422,0;bDu503,0;bDN1992,0;bEA503,0;bEB422,0;bEb1992,0;bED1992,0;bEE200369,2;bEF503,0;bEG503,0;bEH150018,0;bEk1992,0;bEh1992,0;bEK1992,0;bEa422,0;bEu503,0;bEN1992,0;bFA503,0;bFB422,0;bFb1992,0;bFD1992,0;bFE529,6;bFF505,0;bFG503,0;bFH422,0;bFk1992,0;bFh529,6;bFK422,0;bFa422,0;bFu503,0;bFN1992,0;bGA503,0;bGB422,0;bGb1992,0;bGD422,0;bGE505,0;bGF503,0;bGG503,0;bGH422,0;bGk422,0;bGh422,0;bGK505,0;bGa505,0;bGu503,0;bGN1992,0;bHA503,0;bHB505,0;bHb503,0;bHD503,0;bHE503,0;bHF503,0;bHG503,0;bHH504,0;bHk1992,0;bHh1992,0;bHK1992,0;bHa397,4;bHu503,0;bHN1992,0;bkA503,0;bkB503,0;bkb907,5;bkD503,0;bkE503,0;bkF503,0;bkG503,0;bkH422,0;bkk150018,2;bkh1992,0;bkK1992,0;bka1992,0;bku503,0;bkN1992,0;bhA503,0;bhB503,0;bhb503,0;bhD503,0;bhE503,0;bhF503,0;bhG422,0;bhH422,0;bhk529,7;bhh1992,0;bhK1992,0;bha529,6;bhu503,0;bhN1992,0;bKA503,0;bKB503,0;bKb503,0;bKD503,0;bKE503,0;bKF503,0;bKG503,0;bKH503,0;bKk503,0;bKh503,0;bKK503,0;bKa503,0;bKu503,0;bKN1992,0;DAA503,0;DAB503,0;DAb503,0;DAD503,0;DAE503,0;DAF503,0;DAG503,0;DAH503,0;DAk503,0;DAh503,0;DAK503,0;DAa503,0;DAu503,0;DAN1992,0;DBA503,0;DBB501,0;DBb501,0;DBD501,0;DBE501,0;DBF501,0;DBG501,0;DBH501,0;DBk501,0;DBh1992,0;DBK1992,0;DBa397,4;DBu503,0;DBN1992,0;DbA503,0;DbB101992,0;Dbb101992,0;DbD101992,0;DbE422,0;DbF422,0;DbG501,0;DbH422,0;Dbk1361992,0;Dbh1992,0;DbK1992,0;Dba1992,0;Dbu503,0;DbN1992,0;DDA503,0;DDB200369,3;DDb262,12;DDD226,6;DDE262,4;DDF425,0;DDG422,0;DDH1992,0;DDk1992,0;DDh1992,0;DDK1992,0;DDa1992,0;DDu503,0;DDN1992,0;DEA503,0;DEB1992,0;DEb1992,0;DED1992,0;DEE1992,0;DEF599,0;DEG505,0;DEH1992,0;DEk1992,0;DEh1992,0;DEK1992,0;DEa1992,0;DEu503,0;DEN1992,0;DFA503,0;DFB397,2;DFb1992,0;DFD1992,0;DFE1992,0;DFF422,0;DFG505,0;DFH1992,0;DFk1992,0;DFh1992,0;DFK1992,0;DFa422,0;DFu503,0;DFN1992,0;DGA503,0;DGB529,5;DGb1992,0;DGD262,3;DGE422,0;DGF503,0;DGG505,0;DGH1992,0;DGk422,0;DGh505,0;DGK505,0;DGa505,0;DGu503,0;DGN1992,0;DHA503,0;DHB503,0;DHb503,0;DHD503,0;DHE503,0;DHF503,0;DHG422,0;DHH1992,0;DHk1992,0;DHh1992,0;DHK1992,0;DHa1992,0;DHu503,0;DHN1992,0;DkA503,0;DkB503,0;Dkb503,0;DkD503,0;DkE505,0;DkF503,0;DkG503,0;DkH1992,0;Dkk1992,0;Dkh1992,0;DkK1992,0;Dka262,3;Dku503,0;DkN1992,0;DhA503,0;DhB503,0;Dhb503,0;DhD503,0;DhE503,0;DhF422,0;DhG503,0;DhH529,5;Dhk1992,0;Dhh1992,0;DhK1992,0;Dha529,6;Dhu503,0;DhN1992,0;DKA503,0;DKB503,0;DKb503,0;DKD503,0;DKE503,0;DKF503,0;DKG503,0;DKH503,0;DKk503,0;DKh503,0;DKK503,0;DKa503,0;DKu503,0;DKN1992,0;EAA503,0;EAB503,0;EAb503,0;EAD503,0;EAE503,0;EAF503,0;EAG503,0;EAH503,0;EAk503,0;EAh503,0;EAK503,0;EAa503,0;EAu503,0;EAN1992,0;EBA503,0;EBB501,0;EBb501,0;EBD501,0;EBE501,0;EBF501,0;EBG501,0;EBH501,0;EBk501,0;EBh1992,0;EBK262,4;EBa262,12;EBu503,0;EBN1992,0;EbA503,0;EbB505,0;Ebb505,0;EbD505,0;EbE501,0;EbF505,0;EbG422,0;EbH505,0;Ebk1361992,0;Ebh1992,0;EbK1992,0;Eba1992,0;Ebu503,0;EbN1992,0;EDA503,0;EDB1992,0;EDb397,4;EDD1992,0;EDE1992,0;EDF1992,0;EDG397,4;EDH1992,0;EDk1992,0;EDh1992,0;EDK1992,0;EDa397,3;EDu503,0;EDN1992,0;EEA503,0;EEB1992,0;EEb1992,0;EED1992,0;EEE1992,0;EEF1992,0;EEG1992,0;EEH1992,0;EEk1992,0;EEh1992,0;EEK1992,0;EEa1992,0;EEu503,0;EEN1992,0;EFA503,0;EFB1992,0;EFb1992,0;EFD1992,0;EFE1992,0;EFF262,0;EFG1992,0;EFH1992,0;EFk1992,0;EFh1992,0;EFK1992,0;EFa529,5;EFu503,0;EFN1992,0;EGA503,0;EGB1992,0;EGb1992,0;EGD1992,0;EGE1992,0;EGF1992,0;EGG1992,0;EGH1992,0;EGk1992,0;EGh397,3;EGK505,0;EGa505,0;EGu503,0;EGN1992,0;EHA503,0;EHB1992,0;EHb1992,0;EHD1992,0;EHE1992,0;EHF1992,0;EHG1992,0;EHH1992,0;EHk1992,0;EHh1992,0;EHK1992,0;EHa1992,0;EHu503,0;EHN1992,0;EkA503,0;EkB1992,0;Ekb1992,0;EkD1992,0;EkE1992,0;EkF1992,0;EkG1992,0;EkH1992,0;Ekk1992,0;Ekh1992,0;EkK1992,0;Eka397,3;Eku503,0;EkN1992,0;EhA503,0;EhB503,0;Ehb422,0;EhD503,0;EhE505,0;EhF503,0;EhG503,0;EhH1992,0;Ehk1992,0;Ehh1992,0;EhK1992,0;Eha529,6;Ehu503,0;EhN1992,0;EKA503,0;EKB503,0;EKb503,0;EKD503,0;EKE503,0;EKF503,0;EKG503,0;EKH503,0;EKk503,0;EKh503,0;EKK503,0;EKa503,0;EKu503,0;EKN1992,0;FAA503,0;FAB503,0;FAb503,0;FAD503,0;FAE503,0;FAF503,0;FAG503,0;FAH503,0;FAk503,0;FAh503,0;FAK503,0;FAa503,0;FAu503,0;FAN1992,0;FBA503,0;FBB501,0;FBb501,0;FBD501,0;FBE501,0;FBF501,0;FBG501,0;FBH501,0;FBk501,0;FBh397,4;FBK262,12;FBa737,1;FBu503,0;FBN1992,0;FbA503,0;FbB503,0;Fbb501,0;FbD501,0;FbE501,0;FbF422,0;FbG501,0;FbH501,0;Fbk1361992,0;Fbh1992,0;FbK1992,0;Fba1992,0;Fbu503,0;FbN1992,0;FDA503,0;FDB397,4;FDb1992,0;FDD1992,0;FDE1992,0;FDF1992,0;FDG1992,0;FDH1992,0;FDk1992,0;FDh1992,0;FDK1992,0;FDa1992,0;FDu503,0;FDN1992,0;FEA503,0;FEB1992,0;FEb1992,0;FED1992,0;FEE1992,0;FEF397,1;FEG1992,0;FEH262,1;FEk1992,0;FEh1992,0;FEK1992,0;FEa1992,0;FEu503,0;FEN1992,0;FFA503,0;FFB1992,0;FFb1992,0;FFD1992,0;FFE1992,0;FFF1992,0;FFG1992,0;FFH1992,0;FFk1992,0;FFh1992,0;FFK1992,0;FFa1992,0;FFu503,0;FFN1992,0;FGA503,0;FGB1992,0;FGb1992,0;FGD1992,0;FGE1992,0;FGF1992,0;FGG1992,0;FGH1992,0;FGk1992,0;FGh1992,0;FGK1992,0;FGa1992,0;FGu503,0;FGN1992,0;FHA503,0;FHB1992,0;FHb1992,0;FHD1992,0;FHE1992,0;FHF1992,0;FHG1992,0;FHH1992,0;FHk1992,0;FHh1992,0;FHK1992,0;FHa1992,0;FHu503,0;FHN1992,0;FkA503,0;FkB1992,0;Fkb1992,0;FkD1992,0;FkE1992,0;FkF1992,0;FkG1992,0;FkH1992,0;Fkk1992,0;Fkh1992,0;FkK1992,0;Fka1992,0;Fku503,0;FkN1992,0;FhA503,0;FhB422,0;Fhb1992,0;FhD1992,0;FhE529,6;FhF505,0;FhG503,0;FhH1992,0;Fhk1992,0;Fhh1992,0;FhK1992,0;Fha529,6;Fhu503,0;FhN1992,0;FKA503,0;FKB503,0;FKb503,0;FKD503,0;FKE503,0;FKF503,0;FKG503,0;FKH503,0;FKk503,0;FKh503,0;FKK503,0;FKa503,0;FKu503,0;FKN1992,0;GAA503,0;GAB503,0;GAb503,0;GAD503,0;GAE503,0;GAF503,0;GAG503,0;GAH503,0;GAk503,0;GAh503,0;GAK503,0;GAa503,0;GAu503,0;GAN1992,0;GAO503,0;GBB501,0;GBb501,0;GBD501,0;GBE501,0;GBF422,0;GBG505,0;GBH422,0;GBk422,0;GBh501,0;GBK425,0;GBa1992,0;GBu503,0;GBN1992,0;GBO503,0;GbB503,0;Gbb425,0;GbD501,0;GbE501,0;GbF1992,0;GbG1992,0;GbH1992,0;Gbk1992,0;Gbh1992,0;GbK425,0;Gba503,0;Gbu503,0;GbN1992,0;GDA503,0;GDB200369,3;GDb397,4;GDD1992,0;GDE1992,0;GDF1992,0;GDG1992,0;GDH1992,0;GDk1992,0;GDh1992,0;GDK599,2;GDa1992,0;GDu503,0;GDN1992,0;GEA503,0;GEB1992,0;GEb1992,0;GED1992,0;GEE262,3;GEF422,0;GEG529,1;GEH422,0;GEk1992,0;GEh262,3;GEK422,0;GEa422,0;GEu503,0;GEN1992,0;GFA503,0;GFB1992,0;GFb1992,0;GFD1992,0;GFE1992,0;GFF1992,0;GFG1992,0;GFH1992,0;GFk1992,0;GFh1992,0;GFK397,4;GFa200369,2;GFu503,0;GFN1992,0;GGA503,0;GGB1992,0;GGb1992,0;GGD1992,0;GGE1992,0;GGF1992,0;GGG1992,0;GGH1992,0;GGk1992,0;GGh1992,0;GGK1992,0;GGa1992,0;GGu503,0;GGN1992,0;GHA503,0;GHB1992,0;GHb1992,0;GHD1992,0;GHE1992,0;GHF1992,0;GHG1992,0;GHH1992,0;GHk1992,0;GHh1992,0;GHK1992,0;GHa1992,0;GHu503,0;GHN1992,0;GkA503,0;GkB1992,0;Gkb1992,0;GkD1992,0;GkE1992,0;GkF1323,6;GkG502,0;GkH1323,7;Gkk1992,0;Gkh1992,0;GkK1992,0;Gka1992,0;Gku503,0;GkN1992,0;GhA503,0;GhB422,0;Ghb1992,0;GhD1992,0;GhE529,6;GhF422,0;GhG503,0;GhH422,0;Ghk1992,0;Ghh1992,0;GhK1992,0;Gha529,6;Ghu503,0;GhN1992,0;GKA503,0;GKB503,0;GKb503,0;GKD503,0;GKE503,0;GKF503,0;GKG503,0;GKH503,0;GKk503,0;GKh503,0;GKK503,0;GKa503,0;GKu503,0;GKN1992,0;HAA503,0;HAB503,0;HAb503,0;HAD503,0;HAE503,0;HAF503,0;HAG503,0;HAH503,0;HAk503,0;HAh503,0;HAK503,0;HAa503,0;HAu503,0;HAN1992,0;HBA503,0;HBB501,0;HBb501,0;HBD501,0;HBE501,0;HBF422,0;HBG505,0;HBH422,0;HBk501,0;HBh501,0;HBK501,0;HBa200425,0;HBu503,0;HBN1992,0;HbA503,0;HbB503,0;Hbb501,0;HbD505,0;HbE505,0;HbF1992,0;HbG1992,0;HbH397,4;Hbk422,0;Hbh422,0;HbK503,0;Hba503,0;Hbu503,0;HbN1992,0;HDA503,0;HDB200369,3;HDb1992,0;HDD1992,0;HDE1992,0;HDF1992,0;HDG1992,0;HDH1992,0;HDk1992,0;HDh1992,0;HDK1992,0;HDa1992,0;HDu503,0;HDN1992,0;HEA503,0;HEB200369,3;HEb1992,0;HED1992,0;HEE1992,0;HEF529,3;HEG502,0;HEH529,2;HEk1992,0;HEh1992,0;HEK422,0;HEa422,0;HEu503,0;HEN1992,0;HFA503,0;HFB1992,0;HFb397,1;HFD1992,0;HFE1992,0;HFF1992,0;HFG200424,2;HFH1992,0;HFk1992,0;HFh1992,0;HFK397,4;HFa1992,0;HFu503,0;HFN1992,0;HGA503,0;HGB1992,0;HGb1992,0;HGD1992,0;HGE1992,0;HGF1992,0;HGG1992,0;HGH1992,0;HGk1992,0;HGh1992,0;HGK1992,0;HGa1992,0;HGu503,0;HGN1992,0;HHA503,0;HHB1992,0;HHb1992,0;HHD1992,0;HHE1992,0;HHF1992,0;HHG1992,0;HHH1992,0;HHk1992,0;HHh1992,0;HHK1992,0;HHa1992,0;HHu503,0;HHN1992,0;HkA503,0;HkB1992,0;Hkb1992,0;HkD1992,0;HkE1323,2;HkF501,0;HkG1992,0;HkH501,0;Hkk1323,3;Hkh1992,0;HkK1992,0;Hka1992,0;Hku503,0;HkN1992,0;HhA503,0;HhB422,0;Hhb1992,0;HhD1992,0;HhE529,6;HhF422,0;HhG907,2;HhH422,0;Hhk529,7;Hhh1992,0;HhK1992,0;Hha529,6;Hhu503,0;HhN1992,0;HKA503,0;HKB503,0;HKb503,0;HKD503,0;HKE503,0;HKF503,0;HKG503,0;HKH503,0;HKk503,0;HKh503,0;HKK503,0;HKa503,0;HKu503,0;HKN1992,0;kAA503,0;kAB503,0;kAb503,0;kAD503,0;kAE503,0;kAF503,0;kAG503,0;kAH503,0;kAk503,0;kAh503,0;kAK503,0;kAa503,0;kAu503,0;kAN1992,0;kBA503,0;kBB101992,0;kBb503,0;kBD505,0;kBE505,0;kBF505,0;kBG505,0;kBH422,0;kBk501,0;kBh501,0;kBK501,0;kBa501,0;kBu503,0;kBN1992,0;kbA503,0;kbB763,0;kbb1992,0;kbD1992,0;kbE1992,0;kbF1992,0;kbG397,4;kbH262,4;kbk422,0;kbh505,0;kbK503,0;kba503,0;kbu503,0;kbN1992,0;kDA503,0;kDB1992,0;kDb1992,0;kDD1992,0;kDE1992,0;kDF1992,0;kDG1992,0;kDH1992,0;kDk1992,0;kDh1992,0;kDK1992,0;kDa1992,0;kDu503,0;kDN1992,0;kEA503,0;kEB1992,0;kEb1992,0;kED1992,0;kEE262,3;kEF422,0;kEG529,0;kEH422,0;kEk1992,0;kEh1992,0;kEK422,0;kEa501,0;kEu503,0;kEN1992,0;kFA503,0;kFB505,0;kFb505,0;kFD1992,0;kFE1992,0;kFF1992,0;kFG1992,0;kFH1992,0;kFk1992,0;kFh1992,0;kFK505,0;kFa422,0;kFu503,0;kFN1992,0;kGA503,0;kGB1992,0;kGb1992,0;kGD1992,0;kGE1992,0;kGF1992,0;kGG1992,0;kGH1992,0;kGk1992,0;kGh1992,0;kGK1992,0;kGa1992,0;kGu503,0;kGN1992,0;kHA503,0;kHB1992,0;kHb1992,0;kHD1992,0;kHE1992,0;kHF1992,0;kHG1992,0;kHH1992,0;kHk1992,0;kHh1992,0;kHK1992,0;kHa1992,0;kHu503,0;kHN1992,0;kkA503,0;kkB1992,0;kkb1992,0;kkD1992,0;kkE1992,0;kkF1323,6;kkG502,0;kkH1323,7;kkk1992,0;kkh1992,0;kkK1992,0;kka262,3;kku503,0;kkN1992,0;khA503,0;khB422,0;khb1992,0;khD1992,0;khE1992,0;khF422,0;khG503,0;khH422,0;khk1992,0;khh1992,0;khK1992,0;kha529,6;khu503,0;khN1992,0;kKA503,0;kKB503,0;kKb503,0;kKD503,0;kKE503,0;kKF503,0;kKG503,0;kKH503,0;kKk503,0;kKh503,0;kKK503,0;kKa503,0;kKu503,0;kKN1992,0;hAA503,0;hAB503,0;hAb503,0;hAD503,0;hAE503,0;hAF503,0;hAG503,0;hAH503,0;hAk503,0;hAh503,0;hAK503,0;hAa503,0;hAu503,0;hAN1992,0;hBA503,0;hBB503,0;hBb422,0;hBD1992,0;hBE1992,0;hBF1992,0;hBG1992,0;hBH422,0;hBk501,0;hBh501,0;hBK501,0;hBa501,0;hBu503,0;hBN1992,0;hbA503,0;hbB1992,0;hbb1992,0;hbD1992,0;hbE1992,0;hbF1992,0;hbG1992,0;hbH1992,0;hbk1992,0;hbh1992,0;hbK503,0;hba503,0;hbu503,0;hbN1992,0;hDA503,0;hDB1992,0;hDb1992,0;hDD1992,0;hDE1992,0;hDF1992,0;hDG1992,0;hDH397,1;hDk397,1;hDh1992,0;hDK1992,0;hDa1992,0;hDu503,0;hDN1992,0;hEA503,0;hEB1992,0;hEb1992,0;hED1992,0;hEE1992,0;hEF1992,0;hEG1992,0;hEH1992,0;hEk1992,0;hEh1992,0;hEK504,0;hEa501,0;hEu503,0;hEN1992,0;hFA503,0;hFB505,0;hFb505,0;hFD1992,0;hFE1992,0;hFF1992,0;hFG1992,0;hFH1992,0;hFk1992,0;hFh1992,0;hFK505,0;hFa1361992,0;hFu503,0;hFN1992,0;hGA503,0;hGB1992,0;hGb1992,0;hGD1992,0;hGE1992,0;hGF1992,0;hGG1992,0;hGH1992,0;hGk1992,0;hGh1992,0;hGK1992,0;hGa1992,0;hGu503,0;hGN1992,0;hHA503,0;hHB1992,0;hHb1992,0;hHD1992,0;hHE1992,0;hHF1992,0;hHG1992,0;hHH1992,0;hHk1992,0;hHh1992,0;hHK1992,0;hHa1992,0;hHu503,0;hHN1992,0;hkA503,0;hkB1992,0;hkb1992,0;hkD1992,0;hkE1992,0;hkF1992,0;hkG1992,0;hkH1992,0;hkk1992,0;hkh1992,0;hkK1992,0;hka1992,0;hku503,0;hkN1992,0;hhA503,0;hhB422,0;hhb1992,0;hhD1992,0;hhE1992,0;hhF503,0;hhG503,0;hhH1992,0;hhk1992,0;hhh1992,0;hhK1323,6;hha422,0;hhu503,0;hhN1992,0;hKA503,0;hKB503,0;hKb503,0;hKD503,0;hKE503,0;hKF503,0;hKG503,0;hKH503,0;hKk503,0;hKh503,0;hKK503,0;hKa503,0;hKu503,0;hKN1992,0;KAA503,0;KAB503,0;KAb503,0;KAD503,0;KAE503,0;KAF503,0;KAG503,0;KAH503,0;KAk503,0;KAh503,0;KAK503,0;KAa503,0;KAu503,0;KAN1992,0;KBA503,0;KBB422,0;KBb1361992,0;KBD1992,0;KBE1992,0;KBF737,1;KBG737,2;KBH422,0;KBk501,0;KBh501,0;KBK501,0;KBa501,0;KBu503,0;KBN1992,0;KbA503,0;KbB1992,0;Kbb1992,0;KbD1992,0;KbE1992,0;KbF1992,0;KbG1992,0;KbH422,0;Kbk501,0;Kbh501,0;KbK501,0;Kba501,0;Kbu503,0;KbN1992,0;KDA503,0;KDB1992,0;KDb1992,0;KDD1992,0;KDE1992,0;KDF1992,0;KDG262,3;KDH422,0;KDk505,0;KDh505,0;KDK425,0;KDa501,0;KDu503,0;KDN1992,0;KEA503,0;KEB1992,0;KEb1992,0;KED1992,0;KEE1992,0;KEF397,1;KEG1992,0;KEH1992,0;KEk1992,0;KEh1992,0;KEK599,0;KEa501,0;KEu503,0;KEN1992,0;KFA503,0;KFB422,0;KFb505,0;KFD1992,0;KFE397,1;KFF262,1;KFG1992,0;KFH1992,0;KFk1992,0;KFh1992,0;KFK505,0;KFa1361992,0;KFu503,0;KFN1992,0;KGA503,0;KGB1992,0;KGb1992,0;KGD1992,0;KGE1992,0;KGF1992,0;KGG1992,0;KGH1992,0;KGk1992,0;KGh1992,0;KGK1992,0;KGa1992,0;KGu503,0;KGN1992,0;KHA503,0;KHB1992,0;KHb1992,0;KHD1992,0;KHE1992,0;KHF1992,0;KHG1992,0;KHH1992,0;KHk1992,0;KHh1992,0;KHK1992,0;KHa1992,0;KHu503,0;KHN1992,0;KkA503,0;KkB1992,0;Kkb1992,0;KkD1992,0;KkE1992,0;KkF262,1;KkG397,1;KkH1992,0;Kkk1992,0;Kkh1992,0;KkK1992,0;Kka529,4;Kku503,0;KkN1992,0;KhA503,0;KhB422,0;Khb1992,0;KhD1992,0;KhE529,6;KhF505,0;KhG503,0;KhH503,0;Khk1992,0;Khh1992,0;KhK1323,6;Kha422,0;Khu503,0;KhN1992,0;KKA503,0;KKB503,0;KKb503,0;KKD503,0;KKE503,0;KKF503,0;KKG503,0;KKH503,0;KKk503,0;KKh503,0;KKK503,0;KKa503,0;KKu503,0;KKN1992,0;aAA503,0;aAB503,0;aAb503,0;aAD503,0;aAE503,0;aAF503,0;aAG503,0;aAH503,0;aAk503,0;aAh503,0;aAK503,0;aAa503,0;aAu503,0;aAN1992,0;aBA503,0;aBB422,0;aBb1361992,0;aBD1992,0;aBE1992,0;aBF422,0;aBG503,0;aBH501,0;aBk501,0;aBh501,0;aBK501,0;aBa501,0;aBu503,0;aBN1992,0;abA503,0;abB1992,0;abb1992,0;abD1992,0;abE1992,0;abF422,0;abG503,0;abH501,0;abk501,0;abh501,0;abK501,0;aba501,0;abu503,0;abN1992,0;aDA503,0;aDB1992,0;aDb1992,0;aDD1992,0;aDE1992,0;aDF422,0;aDG503,0;aDH1361992,3;aDk1361992,3;aDh503,0;aDK501,0;aDa501,0;aDu503,0;aDN1992,0;aEA503,0;aEB529,4;aEb1992,0;aED1992,0;aEE1992,0;aEF422,0;aEG425,0;aEH1992,0;aEk1992,0;aEh422,0;aEK501,0;aEa501,0;aEu503,0;aEN1992,0;aFA503,0;aFB422,0;aFb505,0;aFD505,0;aFE505,0;aFF422,0;aFG599,0;aFH1992,0;aFk1992,0;aFh1992,0;aFK505,0;aFa1361992,0;aFu503,0;aFN1992,0;aGA503,0;aGB262,12;aGb1992,0;aGD1992,0;aGE1992,0;aGF504,0;aGG505,0;aGH1992,0;aGk1992,0;aGh1992,0;aGK1992,0;aGa1992,0;aGu503,0;aGN1992,0;aHA503,0;aHB397,2;aHb1992,0;aHD1992,0;aHE397,3;aHF505,0;aHG505,0;aHH1992,0;aHk1992,0;aHh1992,0;aHK1992,0;aHa150018,1;aHu503,0;aHN1992,0;akA503,0;akB529,4;akb1992,0;akD1992,0;akE1992,0;akF422,0;akG503,0;akH1992,0;akk1992,0;akh1992,0;akK1992,0;aka501,0;aku503,0;akN1992,0;ahA503,0;ahB422,0;ahb1992,0;ahD1992,0;ahE529,6;ahF505,0;ahG503,0;ahH503,0;ahk1323,4;ahh1323,4;ahK1323,6;aha422,0;ahu503,0;ahN1992,0;aKA503,0;aKB503,0;aKb503,0;aKD503,0;aKE503,0;aKF503,0;aKG503,0;aKH503,0;aKk503,0;aKh503,0;aKK503,0;aKa503,0;aKu503,0;aKN1992,0;uAA503,0;uAB503,0;uAb503,0;uAD503,0;uAE503,0;uAF503,0;uAG503,0;uAH503,0;uAk503,0;uAh503,0;uAK503,0;uAa503,0;uAu503,0;uAN1992,0;uBA503,0;uBB422,0;uBb1361992,0;uBD1992,0;uBE200369,0;uBF503,0;uBG1992,0;uBH907,3;uBk501,0;uBh501,0;uBK501,0;uBa501,0;uBu503,0;uBN1992,0;ubA503,0;ubB503,0;ubb1992,0;ubD1992,0;ubE1992,0;ubF505,0;ubG422,0;ubH501,0;ubk501,0;ubh501,0;ubK501,0;uba501,0;ubu503,0;ubN1992,0;uDA503,0;uDB422,0;uDb1992,0;uDD1992,0;uDE1992,0;uDF505,0;uDG503,0;uDH503,0;uDk503,0;uDh501,0;uDK501,0;uDa501,0;uDu503,0;uDN1992,0;uEA503,0;uEB503,0;uEb529,7;uED1992,0;uEE1992,0;uEF503,0;uEG503,0;uEH200369,0;uEk200369,0;uEh422,0;uEK501,0;uEa501,0;uEu503,0;uEN1992,0;uFA503,0;uFB422,0;uFb422,0;uFD505,0;uFE501,0;uFF503,0;uFG503,0;uFH200369,0;uFk1992,0;uFh1992,0;uFK422,0;uFa501,0;uFu503,0;uFN1992,0;uGA503,0;uGB737,0;uGb737,0;uGD1992,0;uGE200369,0;uGF503,0;uGG503,0;uGH397,1;uGk262,9;uGh1992,0;uGK1992,0;uGa504,0;uGu503,0;uGN1992,0;uHA503,0;uHB599,0;uHb1992,0;uHD1992,0;uHE1992,0;uHF503,0;uHG422,0;uHH1992,0;uHk397,1;uHh1992,0;uHK1992,0;uHa422,0;uHu503,0;uHN1992,0;ukA503,0;ukB422,0;ukb150018,2;ukD1992,0;ukE1992,0;ukF503,0;ukG503,0;ukH1992,0;ukk1992,0;ukh529,6;ukK501,0;uka422,0;uku503,0;ukN1992,0;uhA503,0;uhB422,0;uhb529,7;uhD1992,0;uhE529,6;uhF503,0;uhG503,0;uhH503,0;uhk422,0;uhh422,0;uhK422,0;uha422,0;uhu503,0;uhN1992,0;uKA503,0;uKB503,0;uKb503,0;uKD503,0;uKE503,0;uKF503,0;uKG503,0;uKH503,0;uKk503,0;uKh503,0;uKK503,0;uKa503,0;uKu503,0;uKN1992,0;NAA503,0;NAB503,0;NAb503,0;NAD503,0;NAE503,0;NAF503,0;NAG503,0;NAH503,0;NAk503,0;NAh503,0;NAK503,0;NAa503,0;NAu503,0;NAN1992,0;NBA503,0;NBB503,0;NBb503,0;NBD503,0;NBE503,0;NBF503,0;NBG503,0;NBH503,0;NBk503,0;NBh503,0;NBK503,0;NBa503,0;NBu503,0;NBN1992,0;NbA503,0;NbB503,0;Nbb503,0;NbD503,0;NbE503,0;NbF503,0;NbG503,0;NbH503,0;Nbk503,0;Nbh503,0;NbK503,0;Nba503,0;Nbu503,0;NbN1992,0;NDA503,0;NDB503,0;NDb503,0;NDD503,0;NDE503,0;NDF503,0;NDG503,0;NDH503,0;NDk503,0;NDh503,0;NDK503,0;NDa503,0;NDu503,0;NDN1992,0;NEA503,0;NEB503,0;NEb503,0;NED503,0;NEE503,0;NEF503,0;NEG503,0;NEH503,0;NEk503,0;NEh503,0;NEK503,0;NEa503,0;NEu503,0;NEN1992,0;NFA503,0;NFB503,0;NFb503,0;NFD503,0;NFE503,0;NFF503,0;NFG503,0;NFH503,0;NFk503,0;NFh503,0;NFK503,0;NFa503,0;NFu503,0;NFN1992,0;NGA503,0;NGB503,0;NGb503,0;NGD503,0;NGE503,0;NGF503,0;NGG503,0;NGH503,0;NGk503,0;NGh503,0;NGK503,0;NGa503,0;NGu503,0;NGN1992,0;NHA503,0;NHB503,0;NHb503,0;NHD503,0;NHE503,0;NHF503,0;NHG503,0;NHH503,0;NHk503,0;NHh503,0;NHK503,0;NHa503,0;NHu503,0;NHN1992,0;NkA503,0;NkB503,0;Nkb503,0;NkD503,0;NkE503,0;NkF503,0;NkG503,0;NkH503,0;Nkk503,0;Nkh503,0;NkK503,0;Nka503,0;Nku503,0;NkN1992,0;NhA503,0;NhB503,0;Nhb503,0;NhD503,0;NhE503,0;NhF503,0;NhG503,0;NhH503,0;Nhk503,0;Nhh503,0;NhK503,0;Nha503,0;Nhu503,0;NhN1992,0;NKA503,0;NKB503,0;NKb503,0;NKD503,0;NKE503,0;NKF503,0;NKG503,0;NKH503,0;NKk503,0;NKh503,0;NKK503,0;NKa503,0;NKu503,0;NKN1992,0"
    }
}
local UNDERGROUND_BUILDING_PROBABILITY = 0.000005

local function pickUndergroundBuilding()
    local totalProb = 0
    for _, b in ipairs(UNDERGROUND_BUILDING_DATA) do
        totalProb = totalProb + b.probability
    end
    local r = math.random() * totalProb
    for _, b in ipairs(UNDERGROUND_BUILDING_DATA) do
        r = r - b.probability
        if r <= 0 then
            return b
        end
    end
    return UNDERGROUND_BUILDING_DATA[1]
end

local function generateUndergroundBuilding(x, y, z)
    local b = pickUndergroundBuilding()
    for entry in string.gmatch(b.rawData, "[^;]+") do
        local charX = entry:sub(1,1)
        local charY = entry:sub(2,2)
        local charZ = entry:sub(3,3)
        local rest = entry:sub(4)
        local blockIdStr, dataStr = rest:match("^(%d+),(%d+)$")
        if blockIdStr and dataStr then
            local offsetX = buildingCharToNum(charX)
            local offsetY = buildingCharToNum(charY)
            local offsetZ = buildingCharToNum(charZ)
            local blockId = tonumber(blockIdStr)
            local blockData = tonumber(dataStr)
            Block:setBlockAll(x + offsetX, y + offsetY, z + offsetZ, blockId, blockData)
        end
    end
end

----------------------------
-- 噪声叠加与平滑处理
----------------------------
local function getNoiseHeight(x, z)
    local base = perlin3D(x / BASE_NOISE_SCALE, 0, z / BASE_NOISE_SCALE) * BASE_NOISE_AMP
    local detail = perlin3D(x / DETAIL_NOISE_SCALE, 100, z / DETAIL_NOISE_SCALE) * DETAIL_NOISE_AMP
    return base + detail
end

local function generateHeightMap(px, pz)
    local heightMap = {}
    local startX = math.floor(px) - CHUNK_RADIUS
    local endX = math.floor(px) + CHUNK_RADIUS
    local startZ = math.floor(pz) - CHUNK_RADIUS
    local endZ = math.floor(pz) + CHUNK_RADIUS

    for x = startX, endX do
        heightMap[x] = {}
        for z = startZ, endZ do
            local combinedNoise = getNoiseHeight(x, z)
            local rawHeight = math.floor(combinedNoise * HEIGHT_SCALE) + GROUND_LEVEL
            heightMap[x][z] = rawHeight
        end
    end

    for _ = 1, SMOOTH_ITERATIONS do
        for x = startX, endX do
            for z = startZ, endZ do
                local sum = 0
                local count = 0
                for dx = -1, 1 do
                    for dz = -1, 1 do
                        local nx = x + dx
                        local nz = z + dz
                        if heightMap[nx] and heightMap[nx][nz] then
                            sum = sum + heightMap[nx][nz]
                            count = count + 1
                        end
                    end
                end
                if count > 0 then
                    heightMap[x][z] = math.floor(sum / count)
                end
            end
        end
    end

    return heightMap
end

-- 用于平滑建筑生成的地表高度（取周围3×3平均）
local function getFlatHeight(x, z)
    local sum = 0
    local count = 0
    for dx = -1, 1 do
        for dz = -1, 1 do
            local nv = getNoiseHeight(x + dx, z + dz)
            local h = math.floor(nv * HEIGHT_SCALE) + GROUND_LEVEL
            sum = sum + h
            count = count + 1
        end
    end
    return math.floor(sum / count)
end

----------------------------
-- 建筑逻辑（地表建筑）
----------------------------
local suitableBuildingPositions = {}
local generatedBuildings = {}

local function pickBuilding()
    local totalProb = 0
    for _, b in ipairs(BUILDING_DATA) do
        totalProb = totalProb + b.probability
    end
    local r = math.random() * totalProb
    for _, b in ipairs(BUILDING_DATA) do
        r = r - b.probability
        if r <= 0 then
            return b
        end
    end
    return BUILDING_DATA[1]
end

local function generateBuilding(x, y, z)
    local b = pickBuilding()
    for entry in string.gmatch(b.rawData, "[^;]+") do
        local charX = entry:sub(1, 1)
        local charY = entry:sub(2, 2)
        local charZ = entry:sub(3, 3)
        local rest = entry:sub(4)
        local blockIdStr, dataStr = rest:match("^(%d+),(%d+)$")
        if blockIdStr and dataStr then
            local offsetX = buildingCharToNum(charX)
            local offsetY = buildingCharToNum(charY)
            local offsetZ = buildingCharToNum(charZ)
            local blockId = tonumber(blockIdStr)
            local blockData = tonumber(dataStr)
            Block:setBlockAll(x + offsetX, y + offsetY-2, z + offsetZ, blockId, blockData)
        end
    end
end

----------------------------
-- 建筑逻辑（地下遗迹）
----------------------------
local suitableUndergroundPositions = {}
local generatedUndergroundBuildings = {}

local function pickUndergroundBuilding()
    local totalProb = 0
    for _, b in ipairs(UNDERGROUND_BUILDING_DATA) do
        totalProb = totalProb + b.probability
    end
    local r = math.random() * totalProb
    for _, b in ipairs(UNDERGROUND_BUILDING_DATA) do
        r = r - b.probability
        if r <= 0 then
            return b
        end
    end
    return UNDERGROUND_BUILDING_DATA[1]
end

local function generateUndergroundBuilding(x, y, z)
    local b = pickUndergroundBuilding()
    for entry in string.gmatch(b.rawData, "[^;]+") do
        local charX = entry:sub(1, 1)
        local charY = entry:sub(2, 2)
        local charZ = entry:sub(3, 3)
        local rest = entry:sub(4)
        local blockIdStr, dataStr = rest:match("^(%d+),(%d+)$")
        if blockIdStr and dataStr then
            local offsetX = buildingCharToNum(charX)
            local offsetY = buildingCharToNum(charY)
            local offsetZ = buildingCharToNum(charZ)
            local blockId = tonumber(blockIdStr)
            local blockData = tonumber(dataStr)
            Block:setBlockAll(x + offsetX, y + offsetY, z + offsetZ, blockId, blockData)
        end
    end
end

----------------------------
-- 地形生成主函数
----------------------------
local function f(e)
    local result, px, py, pz = Actor:getPosition(e.eventobjid)
    local heightMap = generateHeightMap(px, pz)

    local startX = math.floor(px) - CHUNK_RADIUS
    local endX = math.floor(px) + CHUNK_RADIUS
    local startZ = math.floor(pz) - CHUNK_RADIUS
    local endZ = math.floor(pz) + CHUNK_RADIUS

    for x = startX, endX do
        for z = startZ, endZ do
            local height = heightMap[x][z]
            for y = 0, height do
                local isCave = false
                -- 矿洞生成：仅在 y < CAVE_DEPTH（地下区域）生成矿洞
                if y < CAVE_DEPTH and y > 10 then  
                    local caveNoise = perlin3D(x / CAVE_SCALE, y / CAVE_SCALE, z / CAVE_SCALE)  
                    if caveNoise > CAVE_THRESHOLD then  
                        isCave = true  
                        for dx = -CAVE_RADIUS, CAVE_RADIUS do  
                            for dy = -CAVE_RADIUS, CAVE_RADIUS do  
                                for dz = -CAVE_RADIUS, CAVE_RADIUS do  
                                    if dx * dx + dy * dy + dz * dz <= CAVE_RADIUS * CAVE_RADIUS then  
                                        Block:setBlockAll(x + dx, y + dy, z + dz, BLOCK_AIR, 0)  
                                    end  
                                end  
                            end  
                        end  
                    end  
                end 

                if not isCave then
                    if y == height then
                        local combinedNoise = getNoiseHeight(x, z)
                        if combinedNoise < RIVER_THRESHOLD then
                            Block:setBlockAll(x, y, z, BLOCK_WATER, 0)
                            if math.random() < waterblockP then
                                local floatid = waterblock[math.random(1, #waterblock)]
                                Block:setBlockAll(x, y + 1, z, floatid, 0)
                            end
                        else
                            Block:setBlockAll(x, y, z, BLOCK_GRASS, 0)
                            -- 表层建筑
                            if math.random() < 0.01 then
                                local flatH = getFlatHeight(x, z)
                                table.insert(suitableBuildingPositions, {x = x, y = flatH + 1, z = z})
                            end
                            if math.random() < flowerP then
                                local flowerid = flower[math.random(1, #flower)]
                                Block:setBlockAll(x, y + 1, z, flowerid, 0)
                            end
                        end
                    elseif y >= height - 4 then
                        Block:setBlockAll(x, y, z, BLOCK_DIRT, 0)
                    elseif y <= height - 5 then
                        -- 深层：先尝试生成地下遗迹候选，再按原逻辑生成矿物或泥土
                        if math.random() < 0.000005 then
                            -- 记录地下遗迹候选位置
                            table.insert(suitableUndergroundPositions, {x = x, y = 25, z = z})
                        else
                            if math.random() < MINERAL_PROBABILITY then
                                local mineralID = MINERAL_IDS[math.random(1, #MINERAL_IDS)]
                                Block:setBlockAll(x, y, z, mineralID, 0)
                            elseif math.random() < min then
                                Block:setBlockAll(x, y, z, 107, 0)
                            else
                                Block:setBlockAll(x, y, z, BLOCK_S, 0)
                            end
                        end
                    end
                end
            end
            for y = height + 1, GROUND_LEVEL + HEIGHT_SCALE do
                Block:setBlockAll(x, y, z, BLOCK_AIR, 0)
            end
        end
    end

    -- 生成地表建筑
    for _, pos in ipairs(suitableBuildingPositions) do
        local valid = true
        for _, b in ipairs(generatedBuildings) do
            local dist = math.sqrt((pos.x - b.x)^2 + (pos.z - b.z)^2)
            if dist < BUILDING_MIN_DISTANCE then
                valid = false
                break
            end
        end
        if valid then
            generateBuilding(pos.x, pos.y, pos.z)
            table.insert(generatedBuildings, {x = pos.x, z = pos.z})
        end
    end
    suitableBuildingPositions = {}

    -- 生成地下遗迹建筑
    for _, pos in ipairs(suitableUndergroundPositions) do
        local valid = true
        for _, b in ipairs(generatedUndergroundBuildings or {}) do
            local dist = math.sqrt((pos.x - b.x)^2 + (pos.z - b.z)^2)
            if dist < BUILDING_MIN_DISTANCE then
                valid = false
                break
            end
        end
        if valid then
            generateUndergroundBuilding(pos.x, pos.y, pos.z)
            generatedUndergroundBuildings = generatedUndergroundBuildings or {}
            table.insert(generatedUndergroundBuildings, {x = pos.x, z = pos.z})
        end
    end
    suitableUndergroundPositions = {}

    Actor:setPosition(e.eventobjid, px, py + 80, pz)
end

ScriptSupportEvent:registerEvent([=[Player.UseItem]=], f)